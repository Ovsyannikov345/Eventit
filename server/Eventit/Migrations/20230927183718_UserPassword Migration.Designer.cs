// <auto-generated />
using System;
using Eventit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eventit.Migrations
{
    [DbContext(typeof(EventitDbContext))]
    [Migration("20230927183718_UserPassword Migration")]
    partial class UserPasswordMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eventit.Models.Chat", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.CompanyContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CompanyContactPerson", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.CompanyProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("PK__CompanyP__3214EC07959F7D49");

                    b.ToTable("CompanyProfilePicture", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeRestriction")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("EntranceFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(9, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Free")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("OnlineEvent")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.EventPhoto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("EventPhoto", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.EventReview", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventReview", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.MessageSender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageSender", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Eventit.Models.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("EventsCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Organizer", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2, 2)");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Place", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.PlaceReview", b =>
                {
                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("OrganizerId", "PlaceId");

                    b.HasIndex("PlaceId");

                    b.ToTable("PlaceReview", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.SupportRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("Eventit.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC074C34685E");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.UserProfilePicture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id")
                        .HasName("PK__UserProf__3214EC07CDF0039A");

                    b.ToTable("UserProfilePicture", (string)null);
                });

            modelBuilder.Entity("UserEvent", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("UserEvent", (string)null);
                });

            modelBuilder.Entity("Eventit.Models.Chat", b =>
                {
                    b.HasOne("Eventit.Models.Event", "Event")
                        .WithOne("Chat")
                        .HasForeignKey("Eventit.Models.Chat", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatEvent");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Eventit.Models.CompanyContactPerson", b =>
                {
                    b.HasOne("Eventit.Models.Company", "IdNavigation")
                        .WithOne("CompanyContactPerson")
                        .HasForeignKey("Eventit.Models.CompanyContactPerson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactPersonCompany");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Eventit.Models.CompanyProfilePicture", b =>
                {
                    b.HasOne("Eventit.Models.Company", "IdNavigation")
                        .WithOne("CompanyProfilePicture")
                        .HasForeignKey("Eventit.Models.CompanyProfilePicture", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProfilePictureCompany");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Eventit.Models.Event", b =>
                {
                    b.HasOne("Eventit.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventOrganizer");

                    b.HasOne("Eventit.Models.Place", "Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_EventPlace");

                    b.Navigation("Organizer");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Eventit.Models.EventPhoto", b =>
                {
                    b.HasOne("Eventit.Models.Event", "IdNavigation")
                        .WithOne("EventPhoto")
                        .HasForeignKey("Eventit.Models.EventPhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventPhotoEvent");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Eventit.Models.EventReview", b =>
                {
                    b.HasOne("Eventit.Models.Event", "Event")
                        .WithMany("EventReviews")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventReview_Event");

                    b.HasOne("Eventit.Models.User", "User")
                        .WithMany("EventReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventReview_User");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventit.Models.Message", b =>
                {
                    b.HasOne("Eventit.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("FK_MessageChat");

                    b.HasOne("Eventit.Models.MessageSender", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_MessageMessageSender");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Eventit.Models.MessageSender", b =>
                {
                    b.HasOne("Eventit.Models.Company", "Company")
                        .WithMany("MessageSenders")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_MessageSenderCompany");

                    b.HasOne("Eventit.Models.User", "User")
                        .WithMany("MessageSenders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MessageSenderUser");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventit.Models.Notification", b =>
                {
                    b.HasOne("Eventit.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventit.Models.Organizer", b =>
                {
                    b.HasOne("Eventit.Models.Company", "Company")
                        .WithMany("Organizers")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_OrganizerCompany");

                    b.HasOne("Eventit.Models.User", "User")
                        .WithMany("Organizers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_OrganizerUser");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventit.Models.PlaceReview", b =>
                {
                    b.HasOne("Eventit.Models.Organizer", "Organizer")
                        .WithMany("PlaceReviews")
                        .HasForeignKey("OrganizerId")
                        .IsRequired()
                        .HasConstraintName("FK_PlaceReview_Organizer");

                    b.HasOne("Eventit.Models.Place", "Place")
                        .WithMany("PlaceReviews")
                        .HasForeignKey("PlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_PlaceReview_Place");

                    b.Navigation("Organizer");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Eventit.Models.SupportRequest", b =>
                {
                    b.HasOne("Eventit.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventit.Models.UserProfilePicture", b =>
                {
                    b.HasOne("Eventit.Models.User", "IdNavigation")
                        .WithOne("UserProfilePicture")
                        .HasForeignKey("Eventit.Models.UserProfilePicture", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProfilePictureUser");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("UserEvent", b =>
                {
                    b.HasOne("Eventit.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .IsRequired()
                        .HasConstraintName("FK_UserEvent_Event");

                    b.HasOne("Eventit.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .IsRequired()
                        .HasConstraintName("FK_UserEvent_User");
                });

            modelBuilder.Entity("Eventit.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Eventit.Models.Company", b =>
                {
                    b.Navigation("CompanyContactPerson");

                    b.Navigation("CompanyProfilePicture");

                    b.Navigation("MessageSenders");

                    b.Navigation("Organizers");
                });

            modelBuilder.Entity("Eventit.Models.Event", b =>
                {
                    b.Navigation("Chat");

                    b.Navigation("EventPhoto");

                    b.Navigation("EventReviews");
                });

            modelBuilder.Entity("Eventit.Models.MessageSender", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Eventit.Models.Organizer", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PlaceReviews");
                });

            modelBuilder.Entity("Eventit.Models.Place", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PlaceReviews");
                });

            modelBuilder.Entity("Eventit.Models.User", b =>
                {
                    b.Navigation("EventReviews");

                    b.Navigation("MessageSenders");

                    b.Navigation("Organizers");

                    b.Navigation("UserProfilePicture");
                });
#pragma warning restore 612, 618
        }
    }
}
